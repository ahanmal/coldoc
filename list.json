{
    "module_name": "List",
    "top_html": "<code>module List: sig .. end</code><br>List operations. <br><br> Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses. <br><br> The above considerations can usually be ignored if your lists are not longer than about 10000 elements.<pre><code>\ntype 'a t = 'a list = \n| []\n| :: of 'a * 'a list\n</code></pre>An alias for the type of lists.",
    "categories": {
        "Core": "#F94144",
        "Iterator": "#F3722C",
        "2 List Iterator": "#F8961E",
        "List Scanning": "#90BE6D",
        "List Searching": "#4D908E",
        "Association Lists": "#277DA1",
        "Lists of Pairs": "#F9844A",
        "Sorting": "#F9C74F",
        "Functional Iterators": "#43AA8B"
    },
    "functions": [
        {
            "tags": "Core",
            "name": "length",
            "arg_a": "'a list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the length (number of elements) of the given list.</p> </div>",
            "original_sort": 1,
            "gh_count": 78852
        },
        {
            "tags": "Core",
            "name": "compare_lengths",
            "arg_a": "'a list",
            "arg_b": "'blist",
            "arg_c": "",
            "arg_d": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\">Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that the computation stops after itering on the shortest list.</p> </div> <ul class=\"info-attributes\"> <li class=\"\"><b>Since</b> 4.05.0</li> </ul>",
            "original_sort": 2,
            "gh_count": 66
        },
        {
            "tags": "Core",
            "name": "compare_length_with",
            "arg_a": "'a list",
            "arg_b": "int",
            "arg_c": "",
            "arg_d": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\">Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05.0</li> </ul>",
            "original_sort": 3,
            "gh_count": 92
        },
        {
            "tags": "Core",
            "name": "cons",
            "arg_a": "‘a",
            "arg_b": "‘a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 4,
            "gh_count": 2958
        },
        {
            "tags": "Core",
            "name": "hd",
            "arg_a": "'a list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "‘a",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the first element of the given list.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Failure</code> if the list is empty.</li> </ul>",
            "original_sort": 5,
            "gh_count": 32102
        },
        {
            "tags": "Core",
            "name": "tl",
            "arg_a": "'a list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "‘a",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the given list without its first element.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Failure</code> if the list is empty.</li> </ul>",
            "original_sort": 6,
            "gh_count": 20304
        },
        {
            "tags": "Core",
            "name": "nth",
            "arg_a": "'a list",
            "arg_b": "int",
            "arg_c": "",
            "arg_d": "",
            "return": "‘a",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the <code class=\"code\">n</code>-th element of the given list. The first element (head of the list) is at position 0.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b><ul><li><code>Failure</code> if the list is too short.</li> <li><code>Invalid_argument</code> if <code class=\"code\">n</code> is negative.</li> </ul></li> </ul>",
            "original_sort": 7,
            "gh_count": 17099
        },
        {
            "tags": "Core",
            "name": "nth_opt",
            "arg_a": "'a list",
            "arg_b": "int",
            "arg_c": "",
            "arg_d": "",
            "return": "‘a option",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the <code class=\"code\">n</code>-th element of the given list. The first element (head of the list) is at position 0. Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n</code> is negative.</li> </ul>",
            "original_sort": 8,
            "gh_count": 227
        },
        {
            "tags": "Core",
            "name": "rev",
            "arg_a": "'a list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">List reversal.</p> </div>",
            "original_sort": 9,
            "gh_count": 103351
        },
        {
            "tags": "Core",
            "name": "init",
            "arg_a": "int",
            "arg_b": "(int -> ‘a)",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">[f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)]</code>, evaluated left to right.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.06.0</li> <li><b>Raises</b> <code>Invalid_argument</code> if len &lt; 0.</li> </ul>",
            "original_sort": 10,
            "gh_count": 9566
        },
        {
            "tags": "Core",
            "name": "append",
            "arg_a": "'a list",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Concatenate two lists. Same as the infix operator <code class=\"code\">@</code>. Not tail-recursive (length of the first argument).</p> </div>",
            "original_sort": 11,
            "gh_count": 10423
        },
        {
            "tags": "Core",
            "name": "rev_append",
            "arg_a": "'a list",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>. This is equivalent to <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is tail-recursive and more efficient.</p> </div>",
            "original_sort": 12,
            "gh_count": 9015
        },
        {
            "tags": "Core",
            "name": "concat",
            "arg_a": "'a list list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Concatenate a list of lists. The elements of the argument are all concatenated together (in the same order) to give the result. Not tail-recursive (length of the argument + length of the longest sub-list).</p> </div>",
            "original_sort": 13,
            "gh_count": 13804
        },
        {
            "tags": "Core",
            "name": "flatten",
            "arg_a": "'a list list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">An alias for <code class=\"code\">concat</code>.</p> </div>",
            "original_sort": 14,
            "gh_count": 14597
        },
        {
            "tags": "Iterator",
            "name": "iter",
            "arg_a": "('a -> unit)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p> </div>",
            "original_sort": 15,
            "gh_count": 139370
        },
        {
            "tags": "Iterator",
            "name": "iteri",
            "arg_a": "(int -> 'a -> unit)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.00.0</li> </ul>",
            "original_sort": 16,
            "gh_count": 3707
        },
        {
            "tags": "Iterator",
            "name": "map",
            "arg_a": "('a -> 'b)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>, and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code> with the results returned by <code class=\"code\">f</code>. Not tail-recursive.</p> </div>",
            "original_sort": 17,
            "gh_count": 156968
        },
        {
            "tags": "Iterator",
            "name": "mapi",
            "arg_a": "(int -> 'a -> 'b)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.00.0</li> </ul>",
            "original_sort": 18,
            "gh_count": 5052
        },
        {
            "tags": "Iterator",
            "name": "rev_map",
            "arg_a": "('a -> 'b)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and more efficient.</p> </div>",
            "original_sort": 19,
            "gh_count": 8363
        },
        {
            "tags": "Iterator",
            "name": "filter_map",
            "arg_a": "('a -> 'b option)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">filter_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to every element of <code class=\"code\">l</code>, filters out the <code class=\"code\"><span class=\"constructor\">None</span></code> elements and returns the list of the arguments of the <code class=\"code\"><span class=\"constructor\">Some</span></code> elements.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.08.0</li> </ul>",
            "original_sort": 20,
            "gh_count": 5566
        },
        {
            "tags": "Iterator",
            "name": "concat_map",
            "arg_a": "('a -> 'b list)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.concat_map&nbsp;f&nbsp;l</code> gives the same result as <a href=\"List.html#VALconcat\"><code class=\"code\"><span class=\"constructor\">List</span>.concat</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>. Tail-recursive.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.10.0</li> </ul>",
            "original_sort": 21,
            "gh_count": 2671
        },
        {
            "tags": "Iterator",
            "name": "fold_left_map",
            "arg_a": "('a -> 'b -> 'a * 'c)",
            "arg_b": "'a",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "'a * 'c list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">fold_left_map</code> is a combination of <code class=\"code\">fold_left</code> and <code class=\"code\">map</code> that threads an accumulator through calls to <code class=\"code\">f</code></p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.11.0</li> </ul>",
            "original_sort": 22,
            "gh_count": 199
        },
        {
            "tags": "Iterator",
            "name": "fold_left",
            "arg_a": "('a -> 'b -> 'a)",
            "arg_b": "'a",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "'a",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p> </div>",
            "original_sort": 23,
            "gh_count": 98733
        },
        {
            "tags": "Iterator",
            "name": "fold_right",
            "arg_a": "('a -> 'b -> 'b)",
            "arg_b": "'a list",
            "arg_c": "'b",
            "arg_d": "",
            "return": "'b",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>. Not tail-recursive.</p> </div>",
            "original_sort": 24,
            "gh_count": 29334
        },
        {
            "tags": "2 List Iterator",
            "name": "iter2",
            "arg_a": "('a -> 'b -> unit)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths.</li> </ul>",
            "original_sort": 25,
            "gh_count": 8684
        },
        {
            "tags": "2 List Iterator",
            "name": "map2",
            "arg_a": "('a -> 'b -> 'c)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "'c list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths. Not tail-recursive.</li> </ul>",
            "original_sort": 26,
            "gh_count": 10881
        },
        {
            "tags": "2 List Iterator",
            "name": "rev_map2",
            "arg_a": "('a -> 'b -> 'c)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "'c list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and more efficient.</p> </div>",
            "original_sort": 27,
            "gh_count": 1447
        },
        {
            "tags": "2 List Iterator",
            "name": "fold_left2",
            "arg_a": "('a -> 'b -> 'c -> 'a)",
            "arg_b": "'a",
            "arg_c": "'b list",
            "arg_d": "'c list",
            "return": "'a",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths.</li> </ul>",
            "original_sort": 28,
            "gh_count": 5902
        },
        {
            "tags": "2 List Iterator",
            "name": "fold_right2",
            "arg_a": "('a -> 'b -> 'c -> 'c)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "'c",
            "return": "'c",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths. Not tail-recursive.</li> </ul>",
            "original_sort": 29,
            "gh_count": 3412
        },
        {
            "tags": "List Scanning",
            "name": "for_all",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list satisfy the predicate <code class=\"code\">p</code>. That is, it returns <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code> for a non-empty list and <code class=\"code\"><span class=\"keyword\">true</span></code> if the list is empty.</p> </div>",
            "original_sort": 30,
            "gh_count": 18398
        },
        {
            "tags": "List Scanning",
            "name": "exists",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code> for a non-empty list and <code class=\"code\"><span class=\"keyword\">false</span></code> if the list is empty.</p> </div>",
            "original_sort": 31,
            "gh_count": 32440
        },
        {
            "tags": "List Scanning",
            "name": "for_all2",
            "arg_a": "('a -> 'b -> bool)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths.</li> </ul>",
            "original_sort": 32,
            "gh_count": 4265
        },
        {
            "tags": "List Scanning",
            "name": "exists2",
            "arg_a": "('a -> 'b -> bool)",
            "arg_b": "'a list",
            "arg_c": "'b list",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists are determined to have different lengths.</li> </ul>",
            "original_sort": 33,
            "gh_count": 1308
        },
        {
            "tags": "List Scanning",
            "name": "mem",
            "arg_a": "'a",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>.</p> </div>",
            "original_sort": 34,
            "gh_count": 57700
        },
        {
            "tags": "List Scanning",
            "name": "memq",
            "arg_a": "'a",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements.</p> </div>",
            "original_sort": 35,
            "gh_count": 4106
        },
        {
            "tags": "List Searching",
            "name": "find",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Not_found</code> if there is no value that satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</li> </ul>",
            "original_sort": 36,
            "gh_count": 22077
        },
        {
            "tags": "List Searching",
            "name": "find_opt",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">find_opt&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> </ul>",
            "original_sort": 37,
            "gh_count": 1207
        },
        {
            "tags": "List Searching",
            "name": "find_map",
            "arg_a": "('a -> 'b option)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">find_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to the elements of <code class=\"code\">l</code> in order, and returns the first result of the form <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none exist.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.10.0</li> </ul>",
            "original_sort": 38,
            "gh_count": 1616
        },
        {
            "tags": "List Searching",
            "name": "filter",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>. The order of the elements in the input list is preserved.</p> </div>",
            "original_sort": 39,
            "gh_count": 62943
        },
        {
            "tags": "List Searching",
            "name": "find_all",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p> </div>",
            "original_sort": 40,
            "gh_count": 1343
        },
        {
            "tags": "List Searching",
            "name": "filteri",
            "arg_a": "(int -> 'a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>, but the predicate is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.11.0</li> </ul>",
            "original_sort": 41,
            "gh_count": 120
        },
        {
            "tags": "List Searching",
            "name": "partition",
            "arg_a": "('a -> bool)",
            "arg_b": "'a list",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list * 'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>. The order of the elements in the input list is preserved.</p> </div>",
            "original_sort": 42,
            "gh_count": 7461
        },
        {
            "tags": "Association Lists",
            "name": "assoc",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>. That is, <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code> if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Not_found</code> if there is no value associated with <code class=\"code\">a</code> in the list <code class=\"code\">l</code>.</li> </ul>",
            "original_sort": 43,
            "gh_count": 26922
        },
        {
            "tags": "Association Lists",
            "name": "assoc_opt",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>. That is, <code class=\"code\">assoc_opt&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code> if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>. Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the list <code class=\"code\">l</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> </ul>",
            "original_sort": 44,
            "gh_count": 978
        },
        {
            "tags": "Association Lists",
            "name": "assq",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>",
            "original_sort": 45,
            "gh_count": 2341
        },
        {
            "tags": "Association Lists",
            "name": "assq_opt",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "'b option",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> </ul>",
            "original_sort": 46,
            "gh_count": 42
        },
        {
            "tags": "Association Lists",
            "name": "mem_assoc",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists, and false if no bindings exist for the given key.</p> </div>",
            "original_sort": 47,
            "gh_count": 7406
        },
        {
            "tags": "Association Lists",
            "name": "mem_assq",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>",
            "original_sort": 48,
            "gh_count": 405
        },
        {
            "tags": "Association Lists",
            "name": "remove_assoc",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "('a * 'b) list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any. Not tail-recursive.</p> </div>",
            "original_sort": 49,
            "gh_count": 2361
        },
        {
            "tags": "Association Lists",
            "name": "remove_assq",
            "arg_a": "'a",
            "arg_b": "('a * 'b) list",
            "arg_c": "",
            "arg_d": "",
            "return": "('a * 'b) list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.</p> </div>",
            "original_sort": 50,
            "gh_count": 203
        },
        {
            "tags": "Lists of Pairs",
            "name": "split",
            "arg_a": "('a * 'b) list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list * 'b list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Transform a list of pairs into a pair of lists: <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>. Not tail-recursive.</p> </div>",
            "original_sort": 51,
            "gh_count": 9202
        },
        {
            "tags": "Lists of Pairs",
            "name": "combine",
            "arg_a": "'a list",
            "arg_b": "'b list",
            "arg_c": "",
            "arg_d": "",
            "return": "('a * 'b) list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Transform a pair of lists into a list of pairs: <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.</li> </ul>",
            "original_sort": 52,
            "gh_count": 15394
        },
        {
            "tags": "Sorting",
            "name": "sort",
            "arg_a": "('a -> 'a -> int)",
            "arg_b": "'a list",
            "arg_c": "'a list",
            "arg_d": "",
            "return": "",
            "description": "<div class=\"info-desc\"> <p class=\"\">Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function. The resulting list is sorted in increasing order. <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.</p> <p>The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.</p> </div>",
            "original_sort": 53,
            "gh_count": 23919
        },
        {
            "tags": "Sorting",
            "name": "stable_sort",
            "arg_a": "('a -> 'a -> int)",
            "arg_b": "'a list",
            "arg_c": "'a list",
            "arg_d": "",
            "return": "",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .</p> <p>The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.</p> </div>",
            "original_sort": 54,
            "gh_count": 1722
        },
        {
            "tags": "Sorting",
            "name": "fast_sort",
            "arg_a": "('a -> 'a -> int)",
            "arg_b": "'a list",
            "arg_c": "'a list",
            "arg_d": "",
            "return": "",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster on typical input.</p> </div>",
            "original_sort": 55,
            "gh_count": 776
        },
        {
            "tags": "Sorting",
            "name": "sort_uniq",
            "arg_a": "('a -> 'a -> int)",
            "arg_b": "'a list",
            "arg_c": "'a list",
            "arg_d": "",
            "return": "",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.02.0</li> </ul>",
            "original_sort": 56,
            "gh_count": 1462
        },
        {
            "tags": "Sorting",
            "name": "merge",
            "arg_a": "('a -> 'a -> int)",
            "arg_b": "'a list",
            "arg_c": "'a list",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Merge two lists: Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>. If several elements compare equal, the elements of <code class=\"code\">l1</code> will be before the elements of <code class=\"code\">l2</code>. Not tail-recursive (sum of the lengths of the arguments).</p> </div>",
            "original_sort": 57,
            "gh_count": 1681
        },
        {
            "tags": "Functional Iterators",
            "name": "to_seq",
            "arg_a": "'a list",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a Seq.t",
            "description": "<div class=\"info-desc\"> <p class=\"\">Iterate on the list</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.07</li> </ul>",
            "original_sort": 58,
            "gh_count": 520
        },
        {
            "tags": "Functional Iterators",
            "name": "of_seq",
            "arg_a": "'a Seq.t",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "return": "'a list",
            "description": "<div class=\"info-desc\"> <p class=\"\">Create a list from the iterator</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.07</li> </ul>",
            "original_sort": 59,
            "gh_count": 587
        }
    ]
}