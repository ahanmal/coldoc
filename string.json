{
    "module_name": "String",
    "top_html": "<code>module String: sig .. end</code><br>String operations.<br><br>A string is an immutable data structure that contains a fixed-length sequence of (single-byte) characters. Each character can be accessed in constant time through its index.<br><br>Given a string <code>s</code> of length <code>l</code>, we can access each of the <code>l</code> characters of <code>s</code> via its index in the sequence. Indexes start at <code>0</code>, and we will call an index valid in <code>s</code> if it falls within the range <code>[0...l-1]</code> (inclusive). A position is the point between two characters or at the beginning or end of the string.  We call a position valid in <code>s</code> if it falls within the range <code>[0...l]</code> (inclusive). Note that the character at index <code>n</code> is between positions <code>n</code> and <code>n+1</code>.<br><br>Two parameters <code>start</code> and <code>len</code> are said to designate a valid substring of <code>s</code> if <code>len&nbsp;&gt;=&nbsp;0</code> and <code>start</code> and <code>start+len</code> are valid positions in <code>s</code>.<br><br>Note: OCaml strings used to be modifiable in place, for instance via the <code><span class=\"constructor\">String</span>.set</code> and <code><span class=\"constructor\">String</span>.blit</code> functions described below. This usage is only possible when the compiler is put in \"unsafe-string\" mode by giving the <code>-unsafe-string</code> command-line option. This compatibility mode makes the types <code>string</code> and <code>bytes</code> (see module <code><span class=\"constructor\">Bytes</span></code>) interchangeable so that functions expecting byte sequences can also accept strings as arguments and modify them.<br><br>The distinction between <code>bytes</code> and <code>string</code> was introduced in OCaml 4.02, and the \"unsafe-string\" compatibility mode was the default until OCaml 4.05. Starting with 4.06, the compatibility mode is opt-in; we intend to remove the option in the future.<br><br>",
    "categories": {
        "Core": "#F94144",
        "Functional Iterators": "#43AA8B"
    },
    "functions": [
        {
            "tags": "Core",
            "name": "length",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return the length (number of characters) of the given string.</p> </div>",
            "original_sort": 1,
            "gh_count": 109761
        },
        {
            "tags": "Core",
            "name": "get",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "char",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>. You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p> </div> <ul class=\"info-attributes\"> <li class=\"\"><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 2,
            "gh_count": 19933
        },
        {
            "tags": "Core",
            "name": "set",
            "arg_a": "bytes",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "unit",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.set</code></a>.<code class=\"code\">&nbsp;</code></div> <div class=\"info-desc\"> <p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>. You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 3,
            "gh_count": 19965
        },
        {
            "tags": "Core",
            "name": "create",
            "arg_a": "int",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "bytes",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.create</code></a>.<code class=\"code\">&nbsp;</code></div> <div class=\"info-desc\"> <p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>. The sequence is uninitialized and contains arbitrary bytes.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</li> </ul>",
            "original_sort": 4,
            "gh_count": 15854
        },
        {
            "tags": "Core",
            "name": "make",
            "arg_a": "int",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>, filled with the character <code class=\"code\">c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</li> </ul>",
            "original_sort": 5,
            "gh_count": 46643
        },
        {
            "tags": "Core",
            "name": "init",
            "arg_a": "int",
            "arg_b": "(int -> char)",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (called in increasing index order).</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.02.0</li> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</li> </ul>",
            "original_sort": 6,
            "gh_count": 2685
        },
        {
            "tags": "Core",
            "name": "copy",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>Because strings are immutable, it doesn't make much sense to make identical copies of them.</div> <div class=\"info-desc\"> <p>Return a copy of the given string.</p> </div>",
            "original_sort": 7,
            "gh_count": 2239
        },
        {
            "tags": "Core",
            "name": "sub",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "int",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>, containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a valid substring of <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 8,
            "gh_count": 50519
        },
        {
            "tags": "Core",
            "name": "fill",
            "arg_a": "bytes",
            "arg_b": "int",
            "arg_c": "int",
            "arg_d": "char",
            "arg_e": "",
            "return": "unit",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.fill</code></a>.<code class=\"code\">&nbsp;</code></div> <div class=\"info-desc\"> <p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a valid range of <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 9,
            "gh_count": 1009
        },
        {
            "tags": "Core",
            "name": "blit",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "bytes",
            "arg_d": "int",
            "arg_e": "int",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>.</p> </div>",
            "original_sort": 10,
            "gh_count": 6302
        },
        {
            "tags": "Core",
            "name": "concat",
            "arg_a": "string",
            "arg_b": "string list",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>, inserting the separator string <code class=\"code\">sep</code> between each.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the result is longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</li> </ul>",
            "original_sort": 11,
            "gh_count": 63302
        },
        {
            "tags": "Core",
            "name": "iter",
            "arg_a": "(char -> unit)",
            "arg_b": "string",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code>. It is equivalent to <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p> </div>",
            "original_sort": 12,
            "gh_count": 4935
        },
        {
            "tags": "Core",
            "name": "iteri",
            "arg_a": "(int -> char -> unit)",
            "arg_b": "string",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "unit",
            "description": "<div class=\"info-desc\"> <p class=\"\">Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.00.0</li> </ul>",
            "original_sort": 13,
            "gh_count": 382
        },
        {
            "tags": "Core",
            "name": "map",
            "arg_a": "(char -> char)",
            "arg_b": "string",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code> (in increasing index order) and stores the results in a new string that is returned.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.00.0</li> </ul>",
            "original_sort": 14,
            "gh_count": 14487
        },
        {
            "tags": "Core",
            "name": "mapi",
            "arg_a": "(int -> char -> char)",
            "arg_b": "string",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the results in a new string that is returned.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.02.0</li> </ul>",
            "original_sort": 15,
            "gh_count": 467
        },
        {
            "tags": "Core",
            "name": "trim",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace ar, <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>. If there is neither leading nor trailing whitespace character in the argument, return the original string itself, not a copy.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.00.0</li> </ul>",
            "original_sort": 16,
            "gh_count": 4253
        },
        {
            "tags": "Core",
            "name": "escaped",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. All characters outside the ASCII printable range (32..126) are escaped, as well as backslash and double-quote.</p> <p>If there is no special character in the argument that needs escaping, return the original string itself, not a copy.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if the result is longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes. The function <a href=\"Scanf.html#VALunescaped\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped</code></a> is a left inverse of <code class=\"code\">escaped</code>, i.e. <code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped&nbsp;(escaped&nbsp;s)&nbsp;=&nbsp;s</code> for any string <code class=\"code\">s</code> (unless <code class=\"code\">escape&nbsp;s</code> fails).</li> </ul>",
            "original_sort": 17,
            "gh_count": 6775
        },
        {
            "tags": "Core",
            "name": "index",
            "arg_a": "string",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Not_found</code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 18,
            "gh_count": 15812
        },
        {
            "tags": "Core",
            "name": "index_opt",
            "arg_a": "string",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> </ul>",
            "original_sort": 19,
            "gh_count": 483
        },
        {
            "tags": "Core",
            "name": "rindex",
            "arg_a": "string",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Not_found</code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 20,
            "gh_count": 5345
        },
        {
            "tags": "Core",
            "name": "rindex_opt",
            "arg_a": "string",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> </ul>",
            "original_sort": 21,
            "gh_count": 315
        },
        {
            "tags": "Core",
            "name": "index_from",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>. <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b><ul><li><code>Invalid_argument</code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</li> <li><code>Not_found</code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</li> </ul></li> </ul>",
            "original_sort": 22,
            "gh_count": 4204
        },
        {
            "tags": "Core",
            "name": "index_from_opt",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "int option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> <p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 23,
            "gh_count": 283
        },
        {
            "tags": "Core",
            "name": "rindex_from",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>. <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b><ul><li><code>Invalid_argument</code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</li> <li><code>Not_found</code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</li> </ul></li> </ul>",
            "original_sort": 24,
            "gh_count": 1330
        },
        {
            "tags": "Core",
            "name": "rindex_from_opt",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "int option",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.05</li> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 25,
            "gh_count": 239
        },
        {
            "tags": "Core",
            "name": "contains",
            "arg_a": "string",
            "arg_b": "char",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in the string <code class=\"code\">s</code>.</p> </div>",
            "original_sort": 26,
            "gh_count": 9168
        },
        {
            "tags": "Core",
            "name": "contains_from",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>. <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 27,
            "gh_count": 811
        },
        {
            "tags": "Core",
            "name": "rcontains_from",
            "arg_a": "string",
            "arg_b": "int",
            "arg_c": "char",
            "arg_d": "",
            "arg_e": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p> </div> <ul class=\"info-attributes\"> <li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid position in <code class=\"code\">s</code>.</li> </ul>",
            "original_sort": 28,
            "gh_count": 728
        },
        {
            "tags": "Core",
            "name": "uppercase",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div> <div class=\"info-desc\"> <p>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </div>",
            "original_sort": 29,
            "gh_count": 3945
        },
        {
            "tags": "Core",
            "name": "lowercase",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div> <div class=\"info-desc\"> <p>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </div>",
            "original_sort": 30,
            "gh_count": 10740
        },
        {
            "tags": "Core",
            "name": "capitalize",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div> <div class=\"info-desc\"> <p>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</p> </div>",
            "original_sort": 31,
            "gh_count": 7952
        },
        {
            "tags": "Core",
            "name": "uncapitalize",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-deprecated\"> <span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div> <div class=\"info-desc\"> <p>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</p> </div>",
            "original_sort": 32,
            "gh_count": 2938
        },
        {
            "tags": "Core",
            "name": "uppercase_ascii",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 33,
            "gh_count": 1082
        },
        {
            "tags": "Core",
            "name": "lowercase_ascii",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 34,
            "gh_count": 2953
        },
        {
            "tags": "Core",
            "name": "capitalize_ascii",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 35,
            "gh_count": 2809
        },
        {
            "tags": "Core",
            "name": "uncapitalize_ascii",
            "arg_a": "string",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string",
            "description": "<div class=\"info-desc\"> <p class=\"\">Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 36,
            "gh_count": 883
        },
        {
            "tags": "Core",
            "name": "compare",
            "arg_a": "t",
            "arg_b": "t",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "int",
            "description": "<div class=\"info-desc\"> <p class=\"\">The comparison function for strings, with the same specification as <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>. Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p> </div>",
            "original_sort": 37,
            "gh_count": 11381
        },
        {
            "tags": "Core",
            "name": "equal",
            "arg_a": "t",
            "arg_b": "t",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "bool",
            "description": "<div class=\"info-desc\"> <p class=\"\">The equal function for strings.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.03.0</li> </ul>",
            "original_sort": 38,
            "gh_count": 9270
        },
        {
            "tags": "Core",
            "name": "split_on_char",
            "arg_a": "char",
            "arg_b": "string",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "string list",
            "description": "<div class=\"info-desc\"> <p class=\"\"><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty) substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p> <p>The function's output is specified by the following invariant,</p> <ul> <li>The list is not empty.</li> <li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li> <li>No string in the result contains the <code class=\"code\">sep</code> character.</li> </ul> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.04.0</li> </ul>",
            "original_sort": 39,
            "gh_count": 3720
        },
        {
            "tags": "Functional Iterators",
            "name": "to_seq",
            "arg_a": "t",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "char Seq.t",
            "description": "<div class=\"info-desc\"> <p class=\"\">Iterate on the string, in increasing index order. Modifications of the string during iteration will be reflected in the iterator.</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.07</li> </ul>",
            "original_sort": 40,
            "gh_count": 218
        },
        {
            "tags": "Functional Iterators",
            "name": "to_seqi",
            "arg_a": "t",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "(int * char) Seq.t",
            "description": "<div class=\"info-desc\"> <p class=\"\">Iterate on the string, in increasing order, yielding indices along chars</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.07</li> </ul>",
            "original_sort": 41,
            "gh_count": 10
        },
        {
            "tags": "Functional Iterators",
            "name": "of_seq",
            "arg_a": "char Seq.t",
            "arg_b": "",
            "arg_c": "",
            "arg_d": "",
            "arg_e": "",
            "return": "t",
            "description": "<div class=\"info-desc\"> <p class=\"\">Create a string from the generator</p> </div> <ul class=\"info-attributes\"> <li><b>Since</b> 4.07</li> </ul>",
            "original_sort": 42,
            "gh_count": 85
        }
    ]
}
